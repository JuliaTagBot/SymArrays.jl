var documenterSearchIndex = {"docs":
[{"location":"#SymArrays.jl-1","page":"Home","title":"SymArrays.jl","text":"","category":"section"},{"location":"#","page":"Home","title":"Home","text":"","category":"page"},{"location":"#","page":"Home","title":"Home","text":"Modules = [SymArrays]","category":"page"},{"location":"#SymArrays.SymArr_ifsym-Tuple{Any,Any}","page":"Home","title":"SymArrays.SymArr_ifsym","text":"SymArr_ifsym(A,Nsyms) make a SymArray if there is some symmetry (i.e., any of the Nsyms are not 1)\n\n\n\n\n\n","category":"method"},{"location":"#SymArrays.binomial_simple-Union{Tuple{T}, Tuple{T,T}} where T<:Integer","page":"Home","title":"SymArrays.binomial_simple","text":"based on Base.binomial, but without negative values for n and without overflow checks (index calculations here should not overflow if the array does not have more elements than an Int64 can represent)\n\n\n\n\n\n","category":"method"},{"location":"#SymArrays.@symind_binomial-Tuple{Any,Integer,Integer}","page":"Home","title":"SymArrays.@symind_binomial","text":"calculate binomial(ii+n+offset,n), equal to prod((ii+j+offset)/j, j=1:n) This shows up in size and index calculations for arrays with symmetric indices.\n\n\n\n\n\n","category":"macro"}]
}
